import type { SpanEnded, SpanProbability } from './span';
interface ReadonlySampler {
    readonly probability: number;
    readonly spanProbability: SpanProbability;
    readonly sample: (span: SpanEnded) => boolean;
    readonly shouldSample: (samplingRate: number) => boolean;
}
interface ReadWriteSampler extends ReadonlySampler {
    probability: number;
}
declare class Sampler {
    private _probability;
    /**
     * The current probability scaled to match sampling rate
     *
     * @see scaleProbabilityToMatchSamplingRate
     */
    private scaledProbability;
    constructor(initialProbability: number);
    /**
     * The global probability value: a number between 0 & 1
     */
    get probability(): number;
    set probability(probability: number);
    /**
     * The probability value for spans: a number between 0 & 2^32 - 1
     *
     * This is necessary because span sampling rates are generated as unsigned 32
     * bit integers. We scale the global probability value to match that range, so
     * that we can use a simple calculation in 'sample'
     *
     * @see scaleProbabilityToMatchSamplingRate
     */
    get spanProbability(): SpanProbability;
    sample(span: SpanEnded): boolean;
    shouldSample(samplingRate: number): boolean;
}
export default Sampler;
export type { ReadonlySampler, ReadWriteSampler };
//# sourceMappingURL=sampler.d.ts.map