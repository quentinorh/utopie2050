export interface PersistedProbability {
    value: number;
    time: number;
}
export interface PersistencePayloadMap {
    'bugsnag-sampling-probability': PersistedProbability;
    'bugsnag-anonymous-id': string;
}
export type PersistenceKey = keyof PersistencePayloadMap;
export type PersistencePayload = PersistencePayloadMap[PersistenceKey];
export interface Persistence {
    load: <K extends PersistenceKey>(key: K) => Promise<PersistencePayloadMap[K] | undefined>;
    save: <K extends PersistenceKey>(key: K, value: PersistencePayloadMap[K]) => Promise<void>;
}
export declare class InMemoryPersistence implements Persistence {
    private readonly persistedItems;
    load<K extends PersistenceKey>(key: K): Promise<PersistencePayloadMap[K] | undefined>;
    save<K extends PersistenceKey>(key: K, value: PersistencePayloadMap[K]): Promise<void>;
}
export declare function toPersistedPayload<K extends PersistenceKey>(key: K, raw: string): PersistencePayloadMap[K] | undefined;
//# sourceMappingURL=persistence.d.ts.map