import type { Configuration, InternalConfiguration, Logger } from './config';
import type { SpanInternal } from './span';
interface StringAttributeValue {
    stringValue: string;
}
interface IntAttributeValue {
    intValue: string;
}
interface DoubleAttributeValue {
    doubleValue: number;
}
interface BoolAttributeValue {
    boolValue: boolean;
}
type SingleAttributeValue = StringAttributeValue | IntAttributeValue | DoubleAttributeValue | BoolAttributeValue;
interface ArrayAttributeValue {
    arrayValue: {
        values?: SingleAttributeValue[];
    };
}
type JsonAttributeValue = SingleAttributeValue | ArrayAttributeValue;
export interface JsonAttribute {
    key: string;
    value: JsonAttributeValue;
}
type Attribute = string | number | boolean;
type ArrayAttribute = string[] | number[] | boolean[];
export type SpanAttribute = Attribute | ArrayAttribute;
export interface SpanAttributesSource<C extends Configuration> {
    configure: (configuration: InternalConfiguration<C>) => void;
    requestAttributes: (span: SpanInternal) => void;
}
export interface SpanAttributesLimits {
    attributeStringValueLimit: number;
    attributeArrayLengthLimit: number;
    attributeCountLimit: number;
}
export declare class SpanAttributes {
    private readonly attributes;
    private readonly logger;
    private readonly spanAttributeLimits;
    private readonly spanName;
    private _droppedAttributesCount;
    get droppedAttributesCount(): number;
    constructor(initialValues: Map<string, SpanAttribute>, spanAttributeLimits: SpanAttributesLimits, spanName: string, logger: Logger);
    private validateAttribute;
    set(name: string, value: SpanAttribute): void;
    setCustom(name: string, value: SpanAttribute): void;
    remove(name: string): void;
    toJson(): (JsonAttribute | undefined)[];
}
export declare class ResourceAttributes extends SpanAttributes {
    constructor(releaseStage: string, appVersion: string, serviceName: string, sdkName: string, sdkVersion: string, logger: Logger);
}
export type ResourceAttributeSource<C extends Configuration> = (configuration: InternalConfiguration<C>) => Promise<ResourceAttributes>;
/**
 * Converts a span attribute into an OTEL compliant value i.e. { stringValue: 'value' }
 * @param key the name of the span attribute
 * @param attribute the value of the attribute. Can be of type string | number | boolean | string[] | number[] | boolean[]. Invalid types will be removed from array attributes.
 * @returns
 */
export declare function attributeToJson(key: string, attribute: SpanAttribute): JsonAttribute | undefined;
export {};
//# sourceMappingURL=attributes.d.ts.map