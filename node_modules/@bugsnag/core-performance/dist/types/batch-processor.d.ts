import type { Configuration, InternalConfiguration } from './config';
import type { Delivery, TracePayloadEncoder } from './delivery';
import type ProbabilityManager from './probability-manager';
import type { Processor } from './processor';
import type { RetryQueue } from './retry-queue';
import type { ReadonlySampler } from './sampler';
import type { Span, SpanEnded } from './span';
export type OnSpanEndCallback = (span: Span) => boolean | Promise<boolean>;
export type OnSpanEndCallbacks = OnSpanEndCallback[];
type MinimalProbabilityManager = Pick<ProbabilityManager, 'setProbability' | 'ensureFreshProbability'>;
export declare class BatchProcessor<C extends Configuration> implements Processor {
    private readonly delivery;
    private readonly configuration;
    private readonly retryQueue;
    private readonly sampler;
    private readonly probabilityManager;
    private readonly encoder;
    private spans;
    private timeout;
    private flushQueue;
    constructor(delivery: Delivery, configuration: InternalConfiguration<C>, retryQueue: RetryQueue, sampler: ReadonlySampler, probabilityManager: MinimalProbabilityManager, encoder: TracePayloadEncoder<C>);
    private stop;
    private start;
    add(span: SpanEnded): void;
    flush(): Promise<void>;
    private runCallbacks;
    private prepareBatch;
}
export {};
//# sourceMappingURL=batch-processor.d.ts.map