import type { BackgroundingListener } from './backgrounding-listener';
export interface SpanContext {
    readonly id: string;
    readonly traceId: string;
    readonly samplingRate: number;
    readonly isValid: () => boolean;
}
export declare function spanContextEquals(span1?: SpanContext, span2?: SpanContext): boolean;
export interface SpanContextStorage extends Iterable<SpanContext> {
    push: (context: SpanContext) => void;
    pop: (context: SpanContext) => void;
    readonly current: SpanContext | undefined;
    readonly first: SpanContext | undefined;
}
export declare class DefaultSpanContextStorage implements SpanContextStorage {
    private readonly contextStack;
    private isInForeground;
    constructor(backgroundingListener: BackgroundingListener, contextStack?: SpanContext[]);
    [Symbol.iterator](): Iterator<SpanContext>;
    push(context: SpanContext): void;
    pop(context: SpanContext): void;
    get first(): SpanContext | undefined;
    get current(): SpanContext | undefined;
    private removeClosedContexts;
    private onBackgroundStateChange;
}
//# sourceMappingURL=span-context.d.ts.map