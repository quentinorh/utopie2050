import type { SpanAttribute, SpanAttributes } from './attributes';
import type { Clock } from './clock';
import type { DeliverySpan } from './delivery';
import { SpanEvents } from './events';
import type { SpanContext } from './span-context';
import type { Time } from './time';
export interface Span extends SpanContext {
    readonly name: string;
    end: (endTime?: Time) => void;
    setAttribute: (name: string, value: SpanAttribute) => void;
}
export declare const enum Kind {
    Unspecified = 0,
    Internal = 1,
    Server = 2,
    Client = 3,
    Producer = 4,
    Consumer = 5
}
declare const validScaledProbability: unique symbol;
export type ScaledProbability = number & {
    [validScaledProbability]: true;
};
export interface SpanProbability {
    readonly scaled: ScaledProbability;
    readonly raw: number;
}
export interface SpanEnded {
    readonly id: string;
    readonly name: string;
    readonly kind: Kind;
    readonly traceId: string;
    readonly attributes: SpanAttributes;
    readonly events: SpanEvents;
    readonly startTime: number;
    readonly samplingRate: number;
    readonly endTime: number;
    samplingProbability: SpanProbability;
    readonly parentSpanId?: string;
}
export declare function spanToJson(span: SpanEnded, clock: Clock): DeliverySpan;
export declare function spanEndedToSpan(span: SpanEnded): Span;
export declare class SpanInternal implements SpanContext {
    readonly id: string;
    readonly traceId: string;
    readonly parentSpanId?: string;
    readonly samplingRate: number;
    private readonly startTime;
    private readonly kind;
    private readonly events;
    private readonly attributes;
    private readonly clock;
    name: string;
    private endTime?;
    constructor(id: string, traceId: string, name: string, startTime: number, attributes: SpanAttributes, clock: Clock, parentSpanId?: string);
    addEvent(name: string, time: number): void;
    setAttribute(name: string, value: SpanAttribute): void;
    setCustomAttribute(name: string, value: SpanAttribute): void;
    end(endTime: number, samplingProbability: SpanProbability): SpanEnded;
    isValid(): boolean;
}
export interface ParentContext {
    readonly id: string;
    readonly traceId: string;
}
export interface SpanOptions {
    startTime?: Time;
    makeCurrentContext?: boolean;
    parentContext?: ParentContext | null;
    isFirstClass?: boolean;
}
export interface SpanOption<T> {
    message: string;
    getDefaultValue: (value: unknown) => T | undefined;
    validate: (value: unknown) => value is T;
}
export interface InternalSpanOptions<O extends SpanOptions> {
    name: string;
    options: O;
}
export type SpanOptionSchema = Record<string, SpanOption<unknown>>;
export declare const coreSpanOptionSchema: SpanOptionSchema;
export {};
//# sourceMappingURL=span.d.ts.map