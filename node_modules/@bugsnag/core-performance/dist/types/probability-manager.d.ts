import type { Persistence } from './persistence';
import type ProbabilityFetcher from './probability-fetcher';
import type { ReadWriteSampler } from './sampler';
declare class ProbabilityManager {
    static create(persistence: Persistence, sampler: ReadWriteSampler, probabilityFetcher: ProbabilityFetcher): Promise<ProbabilityManager>;
    private readonly persistence;
    private readonly sampler;
    private readonly probabilityFetcher;
    private lastProbabilityTime;
    private outstandingFreshnessCheck;
    private constructor();
    setProbability(newProbability: number): Promise<void>;
    /**
     * Ensure that the current probability value is fresh, i.e. it is less than 24
     * hours old
     *
     * If the probability value is stale then this method will fetch a fresh one
     *
     * This method is idempotent; calling it while there is already an outstanding
     * probability request will not create a second request
     */
    ensureFreshProbability(): Promise<void>;
}
export default ProbabilityManager;
//# sourceMappingURL=probability-manager.d.ts.map